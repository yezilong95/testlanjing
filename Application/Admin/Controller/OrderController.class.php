<?php/** * Created by PhpStorm. * User: gaoxi * Date: 2017-04-02 * Time: 23:01 */namespace Admin\Controller;use Think\Page;/** * 订单管理控制器 * Class OrderController * @package Admin\Controller */class OrderController extends BaseController{    const TMT = 7776000; //三个月的总秒数    public function __construct()    {        parent::__construct();    }    /**     * 订单列表     */    public function index()    {        //银行        $channelModel = DM('Channel', 'Slave');        $tongdaolist = $channelModel->field('id,code,title')->select();        $this->assign("tongdaolist", $tongdaolist);        //通道        $productModel = DM('Product', 'Slave');        $banklist = $productModel->field('id,name,code')->select();        $this->assign("banklist", $banklist);        $where = array();        $memberid = I("request.memberid");        if ($memberid) {            $where['pay_memberid'] = array('eq',$memberid);        }        $orderid = I("request.orderid");        if ($orderid) {            $where['out_trade_id'] = $orderid;        }        $pay_orderid = I("request.pay_orderid");        if ($pay_orderid) {            $where['pay_orderid'] = $pay_orderid;        }        $ddlx = I("request.ddlx","");        if($ddlx != ""){            $where['ddlx'] = array('eq',$ddlx);        }        $tongdao = I("request.tongdao");        if ($tongdao) {            $where['pay_tongdao'] = array('eq',$tongdao);        }        $bank = I("request.bank",'','strip_tags');        if ($bank) {            $where['pay_bankcode'] = array('eq',$bank);        }        $status = I("request.status");        if ($status != "") {            if ($status == '1or2') {                $where['pay_status'] = array('between', array('1', '2'));            } else {                $where['pay_status'] = array('eq', $status);            }        }        $createtime = urldecode(I("request.createtime"));        $applyTTime = 0;        if ($createtime) {            list($cstime,$cetime) = explode('|',$createtime);            $applyTTime = strtotime($cetime)-strtotime($cstime); //导出订单的时间段            $where['pay_applydate'] = ['between',[strtotime($cstime),strtotime($cetime)?strtotime($cetime):time()]];        }        $successtime = urldecode(I("request.successtime"));        if ($successtime) {            list($sstime,$setime) = explode('|',$successtime);            $where['pay_successdate'] = ['between',[strtotime($sstime),strtotime($setime)?strtotime($setime):time()]];        }        $size = 15;        $rows = I('get.rows', $size);        if (!$rows) {            $rows = $size;        }        $orderModel = DM('Order', 'Slave');        $count = $orderModel->where($where)->count();        $listfield = 'id,pay_memberid,pay_orderid,out_trade_id,pay_amount,pay_poundage,pay_actualamount,pay_applydate,pay_successdate,pay_bankname,pay_status,pay_zh_tongdao,pay_notifyurl,pay_callbackurl,pay_tjurl,pay_maori';        $page = new Page($count, $rows);        $list = $orderModel            ->where($where)            ->field($listfield)            ->limit($page->firstRow . ',' . $page->listRows)            ->order('id desc')            ->select();        //查询支付成功的订单的手续费，入金费，总额总和        $countWhere               = $where;        $countWhere['pay_status'] = ['between', [1, 2]];        /*$field                    = ['sum(`pay_amount`) pay_amount', 'sum(`pay_poundage`) pay_poundage', 'sum(`pay_actualamount`) pay_actualamount'];*/        $field                    = ['sum(`pay_amount`) pay_amount', 'sum(`pay_poundage`) pay_poundage', 'sum(`pay_maori`) pay_maori'];        $sum                      = $orderModel->field($field)->where($countWhere)->find();        foreach ($sum as $k => $v) {            $sum[$k] += 0;        }        //图表展示月交易统计, 不需要该功能, 因为查询百万条记录时需要4秒时间        /*        $is_month = true;        //下单时间        if ($createtime) {            $cstartTime = strtotime($cstime);            $cendTime   = strtotime($cetime) ? strtotime($cetime) : time();            $is_month   = $cendTime - $cstartTime > self::TMT ? true : false;        }        //支付时间        if ($successtime) {            $pstartTime = strtotime($sstime);            $pendTime   = strtotime($setime) ? strtotime($setime) : time();            $is_month   = $pendTime - $pstartTime > self::TMT ? true : false;        }        $time       = $successtime ? 'pay_successdate' : 'pay_applydate';        $dateFormat = $is_month ? '%Y年-%m月' : '%Y年-%m月-%d日';        $field      = "FROM_UNIXTIME(" . $time . ",'" . $dateFormat . "') AS date,SUM(pay_amount) AS amount,SUM(pay_poundage) AS rate,SUM(pay_actualamount) AS total";        $_mdata     = $orderModel->field($field)->where($where)->group('date')->select();        $mdata      = [];        foreach ($_mdata as $item) {            $mdata['amount'][] = $item['amount'] ? $item['amount'] : 0;            $mdata['mdate'][]  = "'" . $item['date'] . "'";            $mdata['total'][]  = $item['total'] ? $item['total'] : 0;            $mdata['rate'][]   = $item['rate'] ? $item['rate'] : 0;        }        $this->assign("mdata", $mdata);        */        $this->assign('applyTTime', $applyTTime);        $this->assign('rows', $rows);        $this->assign("list", $list);        $this->assign('stamount', $sum['pay_amount']);        $this->assign('stamountZh', formatMoneyZh($sum['pay_amount']));        $this->assign('page',$page->show());        $this->assign('strate',$sum['pay_poundage']);        $this->assign('strateZh',formatMoneyZh($sum['pay_poundage']));        $this->assign('maori',$sum['pay_maori']);        $this->assign('maoriZh',formatMoneyZh($sum['pay_maori']));        $this->assign("isrootadmin",is_rootAdministrator());        C('TOKEN_ON',false);        $this->display();    }    /**     * 导出交易订单     * */    public function exportorder()    {        $file_name = iconv( "UTF-8", "GB2312", "订单-".date("YmdHis",time()).".csv");        header ( 'Content-Type: application/vnd.ms-excel' );        header ( 'Content-Disposition: attachment;filename='.$file_name );        header('Cache-Control:must-revalidate,post-check=0,pre-check=0');        header('Expires:0');        header('Pragma:public');        set_time_limit(0);//0表示不限时        $memberid = I("request.memberid");        if ($memberid) {            $where['pay_memberid'] = array('eq', $memberid);        }        $orderid = I("request.orderid");        if ($orderid) {            $where['out_trade_id'] = $orderid;        }        $ddlx = I("request.ddlx", "");        if ($ddlx != "") {            $where['ddlx'] = array('eq', $ddlx);        }        $tongdao = I("request.tongdao");        if ($tongdao) {            $where['pay_bankcode'] = array('eq', $tongdao);        }        $bank = I("request.bank", '', 'strip_tags');        if ($bank) {            $where['pay_bankname'] = array('eq', $bank);        }        $status = I("request.status", 0, 'intval');        /*if ($status) {            $where['pay_status'] = array('eq', $status);        }*/        if ($status != "") {            if ($status == '1or2') {                $where['pay_status'] = array('between', array('1', '2'));            } else {                $where['pay_status'] = array('eq', $status);            }        }        $createtime = urldecode(I("request.createtime"));        if ($createtime) {            list($cstime, $cetime)  = explode('|', $createtime);            $where['pay_applydate'] = ['between', [strtotime($cstime), strtotime($cetime) ? strtotime($cetime) : time()]];        }        $successtime = urldecode(I("request.successtime"));        if ($successtime) {            list($sstime, $setime)    = explode('|', $successtime);            $where['pay_successdate'] = ['between', [strtotime($sstime), strtotime($setime) ? strtotime($setime) : time()]];        }        $title = [            '商户订单号',            '平台订单号',            '商户号',            '交易金额',            '手续费',            '实际金额',            '提交时间',            '成功时间',            '通道',            '状态',        ];        $orderModel = DM('Order', 'Slave');        $count = $orderModel->where($where)->count();        $rows  = 6000; //在本地可以大于10000，服务器上不能大于6000，否则以下查询列表时只能查询一次，原因未知        $file = fopen('php://output',"a");        for ($i = 0; $i <= $count; $i += $rows) {            $data = $orderModel->where($where)->order('pay_applydate')->limit($i, $rows)->select();            $list = [];            foreach ($data as $item) {                switch ($item['pay_status']) {                    case 0:                        $status = '未处理';                        break;                    case 1:                        $status = '成功，未返回';                        break;                    case 2:                        $status = '成功，已返回';                        break;                }                if (!empty($item['pay_successdate']) && $item['pay_successdate']>0) {                    $pay_successdate = date('Y-m-d H:i:s', $item['pay_successdate']);                } else {                    $pay_successdate = '';                }                $list[] = [                    'out_trade_id'     => "\t" . $item['out_trade_id'],                    'pay_orderid'      => "\t" . $item['pay_orderid'],                    'pay_memberid'     => $item['pay_memberid'],                    'pay_amount'       => $item['pay_amount'],                    'pay_poundage'     => $item['pay_poundage'],                    'pay_actualamount' => $item['pay_actualamount'],                    'pay_applydate'    => date('Y-m-d H:i:s', $item['pay_applydate']),                    'pay_successdate'  => $pay_successdate,                    'pay_zh_tongdao'   => $item['pay_zh_tongdao'],                    'pay_status'       => $status,                ];            }            //列名            foreach ($title as $v){                $tit[]=iconv('UTF-8', 'GB2312//IGNORE',$v);            }            //将数据通过fputcsv写到文件句柄            fputcsv($file,$tit);            foreach ($list as $v){                foreach ($v as $t){                    $tarr[]=iconv('UTF-8', 'GB2312//IGNORE',$t);                }                fputcsv($file,$tarr);                unset($tarr);            }        }        // 将已经写到csv中的数据存储变量销毁，释放内存占用        unset($list);        //刷新缓冲区        ob_flush();        flush();    }    /**     * 查看订单     */    public function show()    {        $id = I("get.oid", 0, 'intval');        if ($id) {            $order = M('Order')                ->join('LEFT JOIN __MEMBER__ ON (__MEMBER__.id + 10000) = __ORDER__.pay_memberid')                ->field('pay_member.id as userid,pay_member.username,pay_member.realname,pay_order.*')                ->where(['pay_order.id' => $id])                ->find();        }        $this->assign('order', $order);        $this->display();    }    /**     * 资金变动记录     */    public function changeRecord()    {        $productModel = DM('Product', 'Slave');        $banklist = $productModel->field('id,name,code')->select();        $this->assign("tongdaolist", $banklist);        $where    = array();        $memberid = I("get.memberid");        if ($memberid) {            $where['userid'] = array('eq', ($memberid - 10000) > 0 ? ($memberid - 10000) : 0);        }        $orderid = I("get.orderid");        if ($orderid) {            $where['transid'] = array('eq', $orderid);        }        $tongdao = I("request.tongdao");        if ($tongdao) {            $where['tongdao'] = array('eq', $tongdao);        }        $bank = I("request.bank", '', 'strip_tags');        if ($bank) {            $where['lx'] = array('eq', $bank);        }        $createtime = urldecode(I("request.createtime"));        if ($createtime) {            list($cstime, $cetime) = explode('|', $createtime);            $where['datetime']     = ['between', [$cstime, $cetime ? $cetime : date('Y-m-d')]];        }        $count = M('Moneychange')->where($where)->count();        $size  = 15;        $rows  = I('get.rows', $size);        if (!$rows) {            $rows = $size;        }        $page = new Page($count, $rows);        $list = M('Moneychange')            ->where($where)            ->limit($page->firstRow . ',' . $page->listRows)            ->order('id desc')            ->select();        $this->assign('rows', $rows);        $this->assign("list", $list);        $this->assign("page", $page->show());        C('TOKEN_ON', false);        $this->display();    }    /**     * 资金变动记录导出     */    public function exceldownload()    {        $where    = array();        $memberid = I("request.memberid");        if ($memberid) {            $where['userid'] = array('eq', ($memberid - 10000) > 0 ? ($memberid - 10000) : 0);        }        $orderid = I("request.orderid");        if ($orderid) {            $where['orderid'] = $orderid;        }        $tongdao = I("request.tongdao");        if ($tongdao) {            $where['tongdao'] = array('eq', $tongdao);        }        $bank = I("request.bank", '', 'strip_tags');        if ($bank) {            $where['lx'] = array('eq', $bank);        }        $createtime = urldecode(I("request.createtime"));        if ($createtime) {            list($cstime, $cetime) = explode('|', $createtime);            $where['datetime']     = ['between', [$cstime, $cetime ? $cetime : date('Y-m-d')]];        }        $title = array('订单号', '用户名', '类型', '提成用户名', '提成级别', '原金额', '变动金额', '变动后金额', '变动时间', '通道', '备注');        $count = M("Moneychange")->where($where)->count();        $rows  = 10000;        for ($i = 0; $i <= $count; $i += $rows) {            $list = M("Moneychange")->where($where)->limit($i, $rows)->select();            foreach ($list as $key => $value) {                $data[$key]['transid']    = "\t" . $value["transid"];                $data[$key]['parentname'] = getParentName($value["userid"], 1);                switch ($value["lx"]) {                    case 1:                        $data[$key]['lxstr'] = "付款";                        break;                    case 3:                        $data[$key]['lxstr'] = "手动增加";                        break;                    case 4:                        $data[$key]['lxstr'] = "手动减少";                        break;                    case 6:                        $data[$key]['lxstr'] = "结算";                        break;                    case 7:                        $data[$key]['lxstr'] = "冻结";                        break;                    case 8:                        $data[$key]['lxstr'] = "解冻";                        break;                    case 9:                        $data[$key]['lxstr'] = "提成";                        break;                    default:                        $data[$key]['lxstr'] = "未知";                }                $data[$key]['tcuserid']   = getParentName($value["tcuserid"], 1);                $data[$key]['tcdengji']   = $value["tcdengji"];                $data[$key]['ymoney']     = $value["ymoney"];                $data[$key]['money']      = $value["money"];                $data[$key]['gmoney']     = $value["gmoney"];                $data[$key]['datetime']   = "\t" . $value["datetime"];                $data[$key]['tongdao']    = getProduct($value["tongdao"]);                $data[$key]['contentstr'] = $value["contentstr"];            }            exportCsv($data, $title);            // 将已经写到csv中的数据存储变量销毁，释放内存占用            unset($data);            //刷新缓冲区            ob_flush();            flush();        }    }    public function delOrder()    {        $this->ajaxReturn(array('status' => 0, 'msg'=>"不允许删除，请联系管理员"));        exit;        $createtime          = urldecode(I("request.createtime"));        $where['pay_status'] = array('eq', 0);        if ($createtime) {            list($cstime, $cetime)  = explode('|', $createtime);            $where['pay_applydate'] = ['between', [strtotime($cstime), strtotime($cetime) ? strtotime($cetime) : time()]];        } else {            $this->ajaxReturn(array('status' => 0, 'msg'=>"请选择删除无效订单时间段"));        }        $status = M('Order')->where($where)->delete();        if ($status) {            $this->ajaxReturn(array('status' => 1, 'msg'=>"删除成功"));        } else {            $this->ajaxReturn(array('status' => 0, 'msg'=>"删除失败"));        }    }}